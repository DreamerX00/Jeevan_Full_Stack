# Production configuration
services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-jeevanDB}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mydb123}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jeevan-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=prod,docker
      - JDBC_URL=jdbc:postgresql://db:5432/${DB_NAME:-jeevanDB}
      - DB_USERNAME=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-mydb123}
      - SERVER_PORT=8080
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - CORS_ALLOWED_ORIGINS=${FRONTEND_URL:-http://localhost:3000}
      - MAIL_HOST=${MAIL_HOST:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - jeevan-network

  frontend:
    build:
      context: ./frontend/myNewApp
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
    expose:
      - "3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - jeevan-network

  # Reverse proxy (production)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - jeevan-network

volumes:
  postgres_prod_data:
    driver: local

networks:
  jeevan-network:
    driver: bridge
